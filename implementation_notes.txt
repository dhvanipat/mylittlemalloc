*delete this before submitting*

to be implemented:
- clean up coalesce
- memgrind.c
- test files
- last: project README


edge cases:
- what if you had a chunk that allocated all but 8 bytes of memory
    - big enough for a header but you can't store anything there
        - solution: allocate it as a chunk w ith size 0
    - real malloc still returns a pointer for 0 bytes
        - but we should confirm this in the writeup or with an instructor
    - make sure free works as planned on a freshly initiated chunk of memory where there is one chunk of size 0



free
1. valid address?
go through start, iterate through all chunks, find a match
if match, free
if not, illegalpointerexception
coalesce


coalesce
1. check if there is chunk in front AND there is chunk behind
2. check if they are allocated
if either is free merge the chunks

tests:
come up with 2 more stress tests

idea:
1 for coalesce
 coalesce all from before
 coalesce all from after
 coalesce both


 questions:
 - can we make memlength public so test files can account for changes in memlength
 - test where memlength != number divisible by header
 - is it ok if our implementation was slightly different than the writeup but it behaves the same
    - we used struct pointers to iterate and not char pointers
    - init to one big chunk thats not size 0
- can you use errno for error handling even though no outside memory?
- i did the timing for memgrind slightly differently using cpu time instead of wall clock time is this ok
- pseudo random numebrs for task 3 ok?

 - do we put the executables in the final tar submission?